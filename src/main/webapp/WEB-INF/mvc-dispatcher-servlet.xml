<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="
		http://www.springframework.org/schema/lang
		http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Configures the annotation-driven Spring MVC Controller programming 
		model. Note that, with Spring 3.0, this tag works in Servlet MVC only! -->
	<mvc:annotation-driven />

	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />

	<util:properties id="applicationConfig" location="classpath:application.properties" />
	<context:property-placeholder
		properties-ref="applicationConfig" ignore-unresolvable="true" />

	<!-- Static resources -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Scans the classpath for annotated components that will be auto-registered 
		as Spring beans. For example @Controller and @Service. Make sure to set the 
		correct base-package -->
	<context:component-scan base-package="com.travel.wifimap.sandbox" />
	<context:component-scan base-package="com.travel.wifimap.web.controller" />
	<context:component-scan base-package="com.travel.wifimap.dao.impl" />
	<context:component-scan base-package="com.travel.wifimap.service.impl" />

	<!-- View Resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/pages/" p:suffix=".jsp" p:order="1"
		p:contentType="text/html;charset=UTF-8" />

	<import resource="spring/data.xml" />

	<!-- <import resource="spring/security.xml" /> -->

	<!-- Tiles Config -->
	<bean id="tilesviewResolver"
		class="org.springframework.web.servlet.view.tiles2.TilesViewResolver"
		p:order="0" />
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
		p:definitions="/WEB-INF/tiles/tiles-defs.xml" />

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- oauth -->
	<bean id="linkedInServiceConfig" class="com.travel.wifimap.OAuthServiceConfig">
		<constructor-arg value="${app.config.oauth.linkedin.apikey}" />
		<constructor-arg value="${app.config.oauth.linkedin.apisecret}" />
		<constructor-arg value="${app.config.oauth.linkedin.callback}" />
		<constructor-arg value="org.scribe.builder.api.LinkedInApi" />
	</bean>

	<bean id="linkedInServiceProvider" class="com.travel.wifimap.OAuthServiceProvider">
		<constructor-arg name="config" ref="linkedInServiceConfig" />
	</bean>

	<bean id="facebookServiceConfig" class="com.travel.wifimap.OAuthServiceConfig">
		<constructor-arg value="${app.config.oauth.facebook.apikey}" />
		<constructor-arg value="${app.config.oauth.facebook.apisecret}" />
		<constructor-arg value="${app.config.oauth.facebook.callback}" />
		<constructor-arg value="${app.config.oauth.facebook.scope}" />
		<constructor-arg value="org.scribe.builder.api.FacebookApi" />
	</bean>

	<bean id="facebookServiceProvider" class="com.travel.wifimap.OAuthServiceProvider">
		<constructor-arg name="config" ref="facebookServiceConfig" />
	</bean>

	<bean id="twitterServiceConfig" class="com.travel.wifimap.OAuthServiceConfig">
		<property name="apiKey" value="${app.config.oauth.twitter.apikey}" />
		<property name="apiSecret" value="${app.config.oauth.twitter.apisecret}" />
		<property name="callback" value="${app.config.oauth.twitter.callback}" />
		<property name="apiClass" value="org.scribe.builder.api.TwitterApi" />
	</bean>

	<bean id="twitterServiceProvider" class="com.travel.wifimap.OAuthServiceProvider">
		<constructor-arg name="config" ref="twitterServiceConfig" />
	</bean>
	<!-- end of oauth -->

	<bean id="foursquareApi" class="fi.foyt.foursquare.api.FoursquareApi">
		<constructor-arg value="${app.config.oauth.foursquare.apikey}" />
		<constructor-arg value="${app.config.oauth.foursquare.apisecret}" />
		<constructor-arg value="${app.config.oauth.foursquare.callback}" />
	</bean>

</beans>
